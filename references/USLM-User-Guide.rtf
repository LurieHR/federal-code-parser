{\rtf1\ansi\deff0 {\fonttbl {\f0 Times New Roman;}}
\f0\fs24 \par\b Page 1\b0\par \par United States Legislative Markup\par \par User Guide for the USLM Schema\par \par Prepared by: Office of the Law Revision Counsel\par U. S. House of Representatives\par Revised October 2 01 3 (0.1. 4)\par \par \par\b Page 2\b0\par \par \par\b CONTENTS\b0\par 1 Brief Introduction to the United States Code....................................................................................... 6\par 1.1 Bulk Data Downloads of XML Files................................................................................................ 6\par 1.1.1 Directory Structure............................................................................................................... 6\par 1.1.2 Download Protocols.............................................................................................................. 6\par 1.1.3 Versions................................................................................................................................. 6\par 1.2 Authenticity of Data...................................................................................................................... 6\par 2 USLM S chema....................................................................................................................................... 8\par 2.1 Overview....................................................................................................................................... 8\par 2.2 Principles....................................................................................................................................... 8\par 2.2.1 Model the Data as It Appears............................................................................................... 8\par 2.2.2 Leverage Existing Standards.................................................................................................. 9\par 2.2.3 Element Text vs. Attributes................................................................................................... 9\par 2.2.4 Generated Content............................................................................................................... 9\par 2.3 Scope............................................................................................................................................. 9\par 2.3.1 Types of Documents Covered............................................................................................... 9\par 2.4 Goals............................................................................................................................................. 9\par 2.5 Conventions................................................................................................................................ 1 0\par 2.5.1 Conventions Used in the User Guide.................................................................................. 1 0\par 2.5.2 Conventions Used in the XML............................................................................................. 1 0\par 2.5.3 Naming................................................................................................................................ 1 1\par 2.6 Relationship to XHTML................................................................................................................ 1 2\par 2.7 Relationship to Akoma Nt oso..................................................................................................... 1 2\par 2.8 External Dependencies............................................................................................................... 1 3\par 3 Abstract Model vs. Concrete Model................................................................................................... 1 4\par 4 Inheritance.......................................................................................................................................... 1 4\par 4.1 Polymorphism............................................................................................................................. 1 5\par 4.2 Anomalous Structures................................................................................................................. 1 5\par 5 Abstract Model................................................................................................................................... 1 6\par 5.1 Concept....................................................................................................................................... 1 6\par 5.2 Primitive Set................................................................................................................................ 1 6\par 5.3 Core Set....................................................................................................................................... 1 6\par \par \par\b Page 3\b0\par \par 5.4 Generic Set.................................................................................................................................. 1 8\par 5.5 Attribute Groups......................................................................................................................... 1 9\par 5.5.1 Identification....................................................................................................................... 1 9\par 5.5.2 Classification....................................................................................................................... 2 0\par 5.5.3 Annotation.......................................................................................................................... 2 0\par 5.5.4 Description.......................................................................................................................... 2 0\par 5.5.5 Reference............................................................................................................................ 2 1\par 5.5.6 Action.................................................................................................................................. 2 1\par 5.5.7 Amending............................................................................................................................ 2 1\par 5.5.8 Link...................................................................................................................................... 2 2\par 5.5.9 Value................................................................................................................................... 2 2\par 5.5.1 0 Date..................................................................................................................................... 2 2\par 5.5.1 1 Versioning........................................................................................................................... 2 2\par 5.5.1 2 Cell....................................................................................................................................... 2 3\par 5.5.1 3 Note..................................................................................................................................... 2 3\par 5.5.1 4 Other Attributes.................................................................................................................. 2 3\par 6 Core Document Model........................................................................................................................ 2 5\par 6.1 Concept....................................................................................................................................... 2 5\par 6.2 Metadata..................................................................................................................................... 2 6\par 6.3 Main............................................................................................................................................ 2 6\par 6.4 Appendices.................................................................................................................................. 2 6\par 6.5 Signatures................................................................................................................................... 2 6\par 6.6 Multiple Models.......................................................................................................................... 2 6\par 7 Concrete Model.................................................................................................................................. 2 7\par 7.1 Concept....................................................................................................................................... 2 7\par 7.2 Documents.................................................................................................................................. 2 7\par 7.3 Properties.................................................................................................................................... 2 7\par 7.4 Titles............................................................................................................................................ 2 7\par 7.5 Levels........................................................................................................................................... 2 8\par 7.6 Other Structures......................................................................................................................... 2 9\par 7.7 Notes........................................................................................................................................... 3 0\par 7.8 Signatures................................................................................................................................... 3 0\par 7.9 Appendices.................................................................................................................................. 3 0\par \par \par\b Page 4\b0\par \par 8 Versioning Model................................................................................................................................ 3 1\par 8.1 Concept....................................................................................................................................... 3 1\par 8.2 Managing Versions...................................................................................................................... 3 1\par 8.3 Temporal Periods........................................................................................................................ 3 1\par 8.4 Status.......................................................................................................................................... 3 1\par 9 Presentation Model............................................................................................................................ 3 3\par 9.1 Concept....................................................................................................................................... 3 3\par 9.2 CSS Attributes............................................................................................................................. 3 3\par 9.3 HTML Representation................................................................................................................. 3 3\par 1 0 Hierarchical Model.......................................................................................................................... 3 5\par 1 0.1 Concept....................................................................................................................................... 3 5\par 1 0.2 Levels........................................................................................................................................... 3 5\par 1 0.3 Big Levels vs. Small Levels........................................................................................................... 3 5\par 1 0.4 Sandwich Structures................................................................................................................... 3 5\par 1 0.5 Table of Contents........................................................................................................................ 3 6\par 1 1 Table Model.................................................................................................................................... 3 7\par 1 1.1 Column -Oriented........................................................................................................................ 3 7\par 1 1.2 HTML Tables................................................................................................................................ 3 7\par 1 2 Identification Model....................................................................................................................... 3 8\par 1 2.1 Concept....................................................................................................................................... 3 8\par 1 2.2 Immutable Identifiers................................................................................................................. 3 8\par 1 2.3 Temporal Identity....................................................................................................................... 3 8\par 1 2.4 Local Names................................................................................................................................ 3 9\par 1 2.5 Identifiers.................................................................................................................................... 4 0\par 1 3 Referencing Model.......................................................................................................................... 4 1\par 1 3.1 Concept....................................................................................................................................... 4 1\par 1 3.2 URL References........................................................................................................................... 4 1\par 1 3.3 Reference Attributes................................................................................................................... 4 3\par 1 3.4 Referencing Nomenclature......................................................................................................... 4 4\par 1 3.5 References within Amendment Instructions.............................................................................. 4 5\par 1 3.6 Reference Resolver..................................................................................................................... 4 5\par 1 4 Metadata Model............................................................................................................................. 4 7\par 1 4.1 Concept....................................................................................................................................... 4 7\par \par \par\b Page 5\b0\par \par 1 4.2 Properties.................................................................................................................................... 4 7\par 1 4.3 Sets.............................................................................................................................................. 4 8\par 1 5 Notes Model.................................................................................................................................... 4 9\par 1 5.1 Concept....................................................................................................................................... 4 9\par 1 5.2 Note Classes................................................................................................................................ 4 9\par 1 5.2.1 Individual notes................................................................................................................... 4 9\par 1 5.2.2 Notes collection.................................................................................................................. 4 9\par 1 5.3 Type of notes.............................................................................................................................. 4 9\par 1 5.4 Topic of notes.............................................................................................................................. 4 9\par 1 6 Feedback......................................................................................................................................... 5 0\par \par \par\b Page 6\b0\par United States Legislative Model (USLM) User Guide\par 6\par \par\b 1 BRIEF INTRODUCTION TO THE UNITED STATES CODE\b0\par The schema described in this User Guide is used to produce the United States Code in XML. The United\par States Code contains the general and permanent laws of the United States, organized into titles based\par on subject matter.\par The United States Code is prepared and published by the Office of the Law Revision Counsel of the U. S.\par House of Representatives pursuant to 2 U. S. C. 2 85 b. For the printed version of the Code, a complete\par new edition is printed every six years, and five annual cumulative supplements are pr inted in the\par intervening years.\par The Office of the Law Revision Counsel also produces an onl ine HTML version of the United States Code\par for searching and browsing ( http://uscode. house. gov/ ). The online HTML version of the United States\par Code is updated continuously as new laws are enacted.\par The Office of the Law Revision Counsel also produces (begin ning July 3 0, 2 01 3) an XML version of the\par United States Code for download ( http://uscode. house. gov/download/ download. shtml ). The XML\par version is updated continuously as new laws are enacted.\par \par\b 1.1 BULK DATA DOWNLOADS OF XML FILES\b0\par 1.1.1 Directory Structure\par The download directory (http://uscode. house. gov/ download/ download. shtml ) contains one XML file for\par each title of the United States Code and a zip file for the entire Code. The directory also includes the\par XML schema files required for XML validation. A CSS style sheet is provided for convenience. The CSS\par stylesheet is informational only and is not part of the United States Code.\par 1.1.2 Download Protocols\par Bulk download is supported via HTTP protocols.\par 1.1.3 Versions\par The most current version of the United States Code is available in XM L, and prior versions in XML\par created on or after July 3 0, 2 01 3, are also available. Eventually, the titles of some prior editions of the\par United States Code will also be available in XML. During the beta period, the XML format is subject to\par change. Some titles may be replaced with updated versions. The creation date and effective date of\par each title is provided on the website and in the metadata within the XML files.\par \par\b 1.2 AUTHENTICITY OF DATA\b0\par Section 2 04(a) of title 1, United States Code, which was enacted in 1 94 7, relates to the printed version\par of the United States Code. It provides:\par \par \par\b Page 7\b0\par United States Legislative Model (USLM) User Guide\par 7\par In all courts, tribunals, and public offices of the United States, at home or abroad, of the\par District of Columbia, and of each State, Territory, or insular possession of the Uni ted\par States[, t]he matter set forth in the edition of the Code of Laws of the United States\par current at any time shall, together with the then current supplement, if any, establish\par prima facie the laws of the United States, general and permanent in their natu re, in\par force on the day preceding the commencement of the session following the last session the legislation of which is included: Provided, however, That whenever titles of such\par Code shall have been enacted into positive law the text thereof shall be lega l evidence\par of the laws therein contained, in all the courts of the United States, the several States, and the Territories and insular poss essions of the United States.\par In producing the United States Code, t he Office of the Law Revision Counsel uses the sam e data to\par produce the printed version, the HTML version, and the XML version.\par The HTML and XML files created by the Office of the Law Revision Counsel can be manipulated and\par enriched by others and offered to the public in new forms. Once data moves beyond the direct control\par of the Office of the Law Revision Counsel, the Office cannot vouch for its accuracy. Consumers should\par make their own determinations as to the reliability of data from other sources.\par \par \par\b Page 8\b0\par United States Legislative Model (USLM) User Guide\par 8\par \par\b 2 USLM SCHEMA\b0\par \par\b 2.1 OVERVIEW\b0\par United States Legislative Markup (USLM) is an XML information model designed to represent the\par legislation of United States Congress. Initially, USLM is being used to produce titles of the United States\par Code in XML, but it is designed to be adaptable for a ppendices to titles of the United States Code as well\par as bills, resolutions, statutes, and certain other legislative materials. USLM is intended to meet the\par following needs:\par \par\b 1. Allow existing titles of the United States C ode to be converted into XML.\b0\par \par\b 2. Support ongoing maintenance of the United States Code.\b0\par \par\b 3. Support the drafting of new positive law codification bills and related materials.\b0\par \par\b 4. Provide a flexible foundation to meet future needs of Congress.\b0\par \par\b 5. Be compatible with other legislative documents that already exist in other XML formats.\b0\par This User Guide describe s, at a high level, how USML is designed and how it can be used. USLM is\par designed using the XML Schema Definition language (XSD). This User Guide is intended for individuals\par familiar with XSDs and with document information modeling. For more information on XSD s, see the\par W 3 C website at http://www. w 3. org/TR/2 00 4/REC -xmlschema -0-2 00 41 02 8/ and other reference\par materials on these subjects.\par Note: Version 1.0 of XML Schema is used for USLM. A more recent version, V 1.1, is available as a\par reco mme ndation, but currently there is very limited tool support for the more recent version.\par \par\b 2.2 PRINCIPLES\b0\par Following a 1 99 9 feasibility study on XML/SGML,1 the Committee on House Administration adopted XML\par as a data standard for the exchange of legislative documents. As a result, the U. S. House of\par Representatives first publicly released Congressional bill data in XML in 2 00 4. Since that time, a number of best practices and consistent approaches have evo lved around the use of XML across various\par industries. To the greatest extent possible, the design of USLM leverages current best practices in\par legislative information modeling.\par 2.2.1 Model the D ata as I t Appears\par To the greatest extent possible, text that is published is maintained in the main body of the document in\par the order it appears when presented in publication.\par \par 1 The feasibility study is rooted in a 1 99 6 directive from the Committee on House Oversight (now known as the\par Committee on House Administration) and the Senate Committee on Rules and Administration to the Clerk of the\par House and Secretary of Senate, respectively, to work to gether toward establishing common data standards for the\par exchange of legislative information. See also 2 U. S. C. 1 81.\par \par \par\b Page 9\b0\par United States Legislative Model (USLM) User Guide\par 9\par 2.2.2 Leverage Existing Standards\par To the greatest extent possible, established XML standards are incorporated into USLM. For example,\par XHTML 2 is used for tables and the Dublin Core 3 is used for metadata.\par 2.2.3 Element Text vs. Attributes\par XML attributes are reserved for metadata and/or normalized representations of the element text. No\par attribute text should ever appear, as is, in the online or pri nted presentation of the United States Code.\par 2.2.4 Generated Content\par In general, generated text is avoided in USLM. Over the past decade, as Congress has gained experience\par with bill drafting in XML, drafters have found that the use of generated text can be probl ematic,\par particularly when working with existing law. This general rule does not prevent s pecific renderings that\par use the USLM data to generate supplemental display information, such as the header or footer of the\par printed versions.\par \par\b 2.3 SCOPE\b0\par USLM is designed to support a specific set of documents that are legislative in nature. It is not a general\par model for documents outside this specific set.\par 2.3.1 Type s of Documents C overed\par USLM is designed to represent the legislation of United States Congress. Initially, USLM is being used to produce titles of the United States Code in XML, but it is designed to be adaptable for a ppendices to\par titles of the United States Code as well as bills, resolutions, statutes, and certain other legislative\par materials.\par \par\b 2.4 GOALS\b0\par The USLM schema is defined with the following goals in mind:\par 1. Ease of Learning – XML schemas can be difficult to learn and master. It may be quite difficult to\par envision how all the pi eces fit together and how various cases are to be accommodated. In\par addition, the heavy use of jargon may complicate the picture. To counter this, USLM is designed\par to be learned incrementally and to favor legislative and end -user terminology over computer\par jargon. USLM is laid out to allow someone learning it to learn each stage separately and only\par progress to the next stage when the prior stage has been mastered.\par \par \par\b 2. Extensibility – It is not possible to anticipate all the document structures that may arise in\b0\par legislation. The sheer volume of the legacy data makes an exhaustive analysis of legacy documents difficult, and it is impossible to predict all future needs for alternative legislative\par structures or drafting styles. A legislative schema must be able to evolve to allow changes to be\par incorporated, with a minimum of impact, in either a temporary or permanent way. USLM is\par designed, using XML Schema’s inheritance mechanisms, to allow for easy extensibility.\par \par \par\b 2 For more information, see: http://www. w 3. org/TR/xhtml 11/Overview. html#toc\b0\par \par\b 3 For more information, see: http://dublincore. org/\b0\par \par \par\b Page 1 0\b0\par United States Legislative Model (USLM) User Guide\par \par\b 1 0\b0\par \par\b 3. Editability – One of the greatest challenges when designing an XML -based information model is\b0\par to define a model which can be used for editing. USLM is designed to support both completely -\par formed documents and the editing of documents under construction.\par \par\b 2.5 CONVENTIONS\b0\par Conve ntions are important for establishing consistency.\par 2.5.1 Conventions Used in the User Guide\par The following conventions are used in th e User Guide:\par \par\b 1. XML element names are denoted with angled brackets and in courier. For example, <title> is\b0\par an XML element.\par \par\b 2. XML attribute names are denoted with an “@” prefix and in courier. For example, @href is an\b0\par XML attribute.\par \par\b 3. Enumerated values are denoted in courier. For example, landscape is an enumeration.\b0\par \par\b 4. String values are denoted with double quotes and in courier. For example, “title 1 -s 1” is a\b0\par string value.\par \par\b 5. A new term being defined is shown in bold italic.\b0\par 2.5.2 Conventions Used in the XML\par The conventions below are used in the XML schema and XML document instances. It is important that\par these conventions be adhered to when the informat ion model is initially defined, when it is modified,\par and when instances of documents that conform to it are created.\par 2.5.2.1 Namespaces\par USLM supports the use of namespaces. XML provides a namespace mechanism to allow XML element\par names to be defined without naming collisions.\par 2.5.2.2 Namespace URI\par XML namespaces are associated with a URI (Uniform Resource Identifier) which is known to be unique.\par This URI acts as an identifier defining, unambiguously, to which model the element belongs. It is possible\par to define a namespace URI as either a URN URI (a naming convention) or a URL URI (a locating\par convention). In USLM, URL URIs are used as a convention, which is the most common current practice.\par For USLM, the namespace URI is defined as the following URL:\par http://xml. house. gov/schemas/uslm/1.0\par 2.5.2.3 Namespace Prefix\par Ordinarily, a namespace prefix is not necessary and should not be used. However, in cases where a\par namespace prefix is deemed necessary, the preferred prefix is “ USLM”.\par \par \par\b Page 1 1\b0\par United States Legislative Model (USLM) User Guide\par \par\b 1 1\b0\par 2.5.2.4 Schema Versioning\par A schema versioning model is defined in the namespace URI for USLM. The last part of the URL is the\par schema version number. If USLM is modified, a new version number is assigned. The lower order digit is\par used to represent evolutionary additions to the schema, while the higher order digit will change only if\par there is a substantial, and possibly incompatible, modification to the schema.\par Note: Schema changes will not be under taken lightly. Changes can be costly and can severely impact\par systems that rely on the informatio n model. Although the XML version of the United States Code is being\par released in beta format, efforts are being made to minimize the number and frequency of schema\par changes over time.\par 2.5.3 Naming\par In USLM, naming conventions are used to promote consistency, cle aner design, and ease of use. In\par general, names are chosen to be short and to the point, while still conveying the primary purpose.\par Abbreviations are used only when the abbreviation is commonly accepted and not likely to cause\par confusion.\par In general, one-word names are preferred. If necessary, two - or three- word names are used. Two -word\par names are in the form adjective + noun. For three- word names, the last word defines a general class or\par type.\par 2.5.3.1 Type & Groups\par Type and group names are defined in Upper Camel Cas e. For example, Identification Group is an\par attribute group and is expressed in a form where all the words start with an upper case\par character.\par 2.5.3.2 Elements\par Element names are defined in lower Camel Case. For example, <long Title> is an element name\par and is expressed in a form where all the words, except the first one, start with an upper case character.\par 2.5.3.3 Attributes\par Attribute names are defined in lower Camel Case. For example, @align To is an attribute name and is\par expressed in a form where all the words, except the first o ne, start with an upper case character.\par 2.5.3.4 Names and Identifiers\par All @temporal Id names are written in lower case, with underscore (“_“) separators between\par significant portions of the name. All @ids are defined to be globally unique as GUIDS and, for\par compatibility reasons, start with the "id" prefix.\par \par \par\b Page 1 2\b0\par United States Legislative Model (USLM) User Guide\par \par\b 1 2\b0\par \par\b 2.6 RELATIONSHIP TO XHTML\b0\par USLM leverages the XML version of HTML 4.0, commonly called XHTML. Many USLM attribute and\par element names purposely coincide with their XHTML equivalents.\par 2.6.1.1 Identity and locating attributes: id, idref, href, and src.\par The @id, @idref, @href, and @src reference are identical to their XHTML equivalents.\par 2.6.1.2 Role attribute\par The @role attribute is similar to the proposed @role attribute in XHTML and HTML 5. It is used to\par provide additional seman tic information about the purpose of an element. It is particularly useful with\par abstract elements that lack clear semantics.\par 2.6.1.3 Style attributes: class and style\par The @class attribute is sim ilar to its XHTML equivalent. It should be used to associate presentation\par classes, defined in a CSS file, with an element.\par The @style attribute is used to specify instance -specific styling, as an override to the class specific\par styling. Its use in USLM is identical to that in XHTML.\par The @class and @style attributes are explained in greater detail in section 9.2.\par 2.6.1.4 Generic elements\par A number of elements in USLM are defined to be identical in name and function to elements in XHTML.\par This set is limited to elements that are likely to be needed within the main legislative language in\par situation s where utilizing the XHTML namespace would be cumbersome or would prevent further use of\par the legislative structures available in USLM. In other cases where a USLM equivalent el ement is not\par defined, it is acceptable and recommended to use the XHTML element with the appropriate namespace\par information.\par The elements borrowed from XHTML are: <p>, <br>, <img>, <center>, <b>, <i>, <sub>, <sup>,\par <del>, and <ins>. In addition to this set, there are other elements which share the same name as\par XHTML elements, but in those cases, the semantics behind the elements are either not completely\par similar or are totally different. Do not assume XHTML semantics merely because the element name\par coinc ides with an XHTML element name.\par \par\b 2.7 RELATIONSHIP TO AKOMA NTOSO\b0\par USLM is not defined to be either a derivative or subset of Akoma Ntoso (http://www. akomantoso. org/ ).\par It would be premature to define USLM in that way while the effort is still underway in the OAS IS\par (http://www. oasis -open. org/committees/legaldocml ) standards group to establish Akoma Ntoso as the\par XML standard for legislative documents. However, USLM is designed to be consistent with Akoma Ntoso\par to the extent practicable. Many of the element and attr ibute names in USLM match the Akoma Ntoso\par equivalents. As Akoma Ntoso becomes a standard, and as demand for it emerges, it should be possible\par to produce an Akoma Ntoso XML rendition of the United States Code through a simple transformation.\par \par \par\b Page 1 3\b0\par United States Legislative Model (USLM) User Guide\par \par\b 1 3\b0\par \par\b 2.8 EXTERNAL DEPEND ENCIES\b0\par USLM has no dependencies on any other information model aside from the core XML model. However,\par the United States Code titles in USLM currently depend on the Dublin Core and XHTML namespaces.\par USLM supports the optional use of other information model s to create composite documents made up\par of multiple namespaces. In particular, the use of the following information models is encouraged:\par 1) Dublin Core for metadata.\par 2) XHTML for tables and other loosely structure content.\par 3) Math ML for equations.\par 4) SVG for vector graphics.\par \par \par\b Page 1 4\b0\par United States Legislative Model (USLM) User Guide\par \par\b 1 4\b0\par \par\b 3 ABSTRACT MODEL VS. CONCRETE MODEL\b0\par There are two basic document models in USLM - the abstract model and the concrete model:\par \par\b 1. The abstract model is a general, highly flexible model defined using a minimum set of tags.\b0\par \par \par\b 2. The concrete model is derived from the abstract model, but it is more narrow. The concrete\b0\par model is defined to precisely model the United States Code. It exists as a simple derivation from\par the ab stract model. While the abstract model uses general terminology, the concrete model\par uses specific terminology. The specific terminology used in the concrete model is based on well -\par established terminology used in the Office of the Law Revision Counsel, whic h produces the\par United States Code.\par \par If a tag is defined in the abstract model, and it is sufficient for direct use, the tag is not redefined in the\par concrete model. The abstract tag is used in documents without change. For example, the <num> tag is\par defined in the abstract model and used without change in all documents. The inheritance technique\par discussed in section 4 is used to establish these two models.\par \par\b 4 INHERITANCE\b0\par Inheritance is a technique, available in many computer languages, to define a basic object w ith basic\par behavior and then produce specializations by adding or modifying the behaviors. Inheritance is also\par available in XML. There are two way s to implement inheritance in USLM:\par \par\b 1. In most situations, inheritance can be implemented in USLM using an approach inspired by the\b0\par XML Schema approach. A base class is defined, and variants are derived from the base class to create new elements and modify the attribute and content models. The formality of this approach is\par an advantage. Adding classes requires a schema change, which constrains the creation of new\par classes without due consideration.\par \par\b 2. For anomalous situations occurring so infrequently that modification of the schema is\b0\par unwarranted, inheritance can be implemented in USLM with an approach inspired by XHTML, using\par the @role attribute to create subclasses. The element name represents the base class, and the\par @role attribute value represents the sub class. This approach makes it easy to create subclasses\par without changing the schema. Although this method provides welcome flexibility for special cases, it\par should be used sparingly to avoid the creation of many poorly defined and poorly supported\par subclasses.\par Note: There is a rough equivalence between the two approaches. For instance,\par <level role=”chapter”> is roughly analogous to < chapter>. However, there is no formal\par mechanism within XML to establish this equivalence.\par \par \par\b Page 1 5\b0\par United States Legislative Model (USLM) User Guide\par \par\b 1 5\b0\par \par\b 4.1 POLYMORPHISM\b0\par In a programming language, p olymorphism is the ability to use an instance of a subclass wherever an\par instance of the base class is expected. XML schemas support polymorphism. However, in XML schemas,\par unlike programming languages, polymorphism is not an implicit capability that comes along with\par inheritance. In XML schemas, polymorphism is achieved by defining a base level element a nd then\par defining subclassed elements to be part of the base elements substitution group.\par Note: In XML Schema V 1.0, substitution groups have limitations that were put in place to prevent\par ambiguous situations from arising which might be difficult for a tool or program to understand. T hese\par limitations have been addressed in XML Schema V 1.1. Unfortunately, XML Schema V 1.1 has not yet been\par adopted widely enough to serve as the basis for USLM.\par \par\b 4.2 ANOMALOUS STRUCTURES\b0\par Two issues drive the wide variety of legislative structures found in the United States Code.\par First, the United States Code contains Federal law enacted over a period of centuries, and legislative\par drafting styles evolve over time. To handle this issue, the data is converted using the XML schem a\par subclassing mechanism.\par Second, some Federal statutes contain features that do not conform to any commonly accepted drafting\par style, past or present. To handle this issue, the data remains in the anomalous form, subclassed when\par possible using the @role attribute.\par \par \par\b Page 1 6\b0\par United States Legislative Model (USLM) User Guide\par \par\b 1 6\b0\par \par\b 5 ABSTRACT MODEL\b0\par \par\b 5.1 CONCEPT\b0\par The foundation of USLM is an abstract model that is designed to be a complete, but generic, legislative\par model using a minim um number of XML element s. It is possible to markup any U. S. bill or resolution or\par any title of the United States Code using the abstract model alone, albeit in a very general way.\par The abstract model contains three basic sets of elements: the primitive set, the core set, and the generic\par set.\par  The primitive set defines the fundamental building blocks used to construct everything else.\par  The core set defines the basic document model.\par  The generic set defines a basic set of general- purpose tags used to markup general structures.\par \par\b 5.2 PRIMITIVE SET\b0\par The primitive set is a s et of four primitive elements that are the fundamental building blocks of the\par abstract model. All USLM elements can be traced back through the derivation hierarchy to one of the\par four primitive elements. The four primitive elements are the following:\par \par\b 1 <marker> A marker is an empty XML element. It is used to denote a location or\b0\par position within an XML docume nt.\par \par\b 2 <inline> An inline is an XML element that can be placed with in text content –\b0\par similar to an XHTML <span> element. An inline element can contain\par other inline elements, markers, or text.\par \par\b 3 <block> A block is an XML element that is presented as a block -like structure and\b0\par does not contain direct child text content.\par \par\b 4 <content> A content is an XML element that is presented as a block -like structure\b0\par and that can contain a mixture of text and XML elements.\par \par\b 5.3 CORE SET\b0\par The core set is a set of twenty -nine elements. Taken together, these twenty -nine core elements define\par the basic document model, which consists o f six parts:\par \par\b 1. The root level document.\b0\par \par\b 2. The metadata block.\b0\par \par\b 3. The main document body ( including a table of contents, statements, a preamble or enacting\b0\par clause, and hierarchical levels ).\par \par\b 4. A structure for references.\b0\par \par\b 5. A structure for amendments.\b0\par \par\b 6. A structure for any appendices.\b0\par \par \par\b Page 1 7\b0\par United States Legislative Model (USLM) User Guide\par \par\b 1 7\b0\par The twenty -nine core elements that define the six- part basic document model are the following:\par \par\b 1 <law Doc> The document root for a legislative document.\b0\par \par\b 2 <document> The document root for a loosely -structure d non-legislative\b0\par document.\par \par\b 3 <meta> An optional container at the start of the document for metadata.\b0\par \par\b 4 <property> A piece of metadata, usually in the <meta> block.\b0\par \par\b 5 <set> A set of metadata, usually containing properties.\b0\par \par\b 6 <toc> A table of contents.\b0\par \par\b 7 <toc Item> An item within a table of contents.\b0\par \par\b 8 <main> The primary container for the body of the document.\b0\par \par\b 9 <statement> Any statement at the start of the document.\b0\par \par\b 1 0 <preamble> A collection of recitals, ending with an enacting formula at the\b0\par start of the document.\par \par\b 1 1 <recital> A clause within the preamble.\b0\par \par\b 1 2 <enacting Formula> The enactment words at the end of the preamble or found in place\b0\par of a preamble if the preamble is omitted.\par \par\b 1 3 <level> A hierarchical item within the document.\b0\par \par\b 1 4 <num> The number, letter, or alphanumeric combination assigned to a\b0\par hierarchical level.\par \par\b 1 5 <text> A block of text, to be used whenever text is required in a block\b0\par level structure but a parent element is required to conform to the\par schema. This is a base class for the < chapeau> and the\par <continuation> elements.\par \par\b 1 6 <heading> An optional name or designation of a level element.\b0\par \par\b 1 7 <subheading> An optional name or designation, to be used below a\b0\par <heading>.\par \par\b 1 8 <crossheading> Placed within and amongst heading levels to separate items within\b0\par a level.\par \par\b 1 9 <instruction> A container used to describe an amendment to legislation.\b0\par Contains <action> elements, as well as the relevant\par <quoted Text> or <quoted Content>.\par \par\b 2 0 <action> Describes the change to be made in an <instruct ion>\b0\par element.\par \par \par\b Page 1 8\b0\par United States Legislative Model (USLM) User Guide\par \par\b 1 8\b0\par \par\b 2 1 <notes> A container for <note> s.\b0\par \par\b 2 2 <note> An individual not e.\b0\par \par\b 2 3 <appendix> A stand -alone appendix document, such as a United States Code\b0\par title appendix, or an appendix at the end of the document. This\par can be either an embedded document or a referenced document.\par \par\b 2 4 <signatures> A container for <signature> s.\b0\par \par\b 2 5 <signature> An individual signature, containing a name and, optionally, a role,\b0\par affiliation, and/or date.\par \par\b 2 6 <ref> A reference or link to another whole document, a specific location\b0\par in another document, or another location within the same\par docume nt.\par \par\b 2 7 <date> A date.\b0\par \par\b 2 8 <quoted Text> Plain t ext quoted from another document or intended to be\b0\par placed, as stated, in another document.\par \par\b 2 9 <quoted Content> Quoted c ontent that may be plain text, XML elements, or text plus\b0\par elements. The content may be quoted from another document or\par may be intended to be placed, as stated, in another document.\par \par\b 5.4 GENERIC SET\b0\par The generic set defines a set of general -purpose tags used to markup basic structures. Many of the\par USLM generic elements are borrowed from XHTML, but exist within the USLM namespace because it is\par often impractical or impossible to use XHTML structures directly, such as when special legislative\par structures are embedded within general structures (or general structures are embedded within special\par legislative structures). In such instances, the USLM generic set is used. The USLM generic set includes\par the following:\par \par\b 1 <layout> A region to be presented in a column -oriented layout – similar to a table.\b0\par \par \par\b 2 <header>\b0\par A heading row in a <layout> structure.\par \par\b 3 <row>\b0\par A normal row in a <layout> structure. In general, this level can be omitted.\par \par \par\b 4 <column>\b0\par A column cell in a <layout> structure.\par \par\b 5 <p>\b0\par A normal ( unnumbered ) paragraph. The semantics for a paragraph should be\par preserved. Do not use the <p> element as a general block like element.\par \par \par\b 6 <br>\b0\par A line break. This element should only be used to force a line break when\par other more semantic elements are not sufficient to achieve t he desired\par formatting.\par \par \par\b Page 1 9\b0\par United States Legislative Model (USLM) User Guide\par \par\b 1 9\b0\par \par \par\b 7 <img>\b0\par An embedde d image. This is a marker element which points, via a URL, to the\par image to be embedded.\par \par \par\b 8 <center>\b0\par Centered text. While this tag is deprecated in HTML 4.0 1, it is provided here\par for convenience as centering text is common.\par \par \par\b 9 <fill In>\b0\par A region of text intended to be filled in on a form.\par \par\b 1 0 <check Box> A check box intended to be checked on a form.\b0\par \par\b 1 1 <b>\b0\par Bold text.\par \par\b 1 2 <i>\b0\par Italic text.\par \par\b 1 3 <sub>\b0\par Subscript ed text.\par \par\b 1 4 <sup>\b0\par Superscript ed text.\par \par\b 1 5 <del>\b0\par Deleted text within a modification.\par \par\b 1 6 <ins>\b0\par Inserted text within a modification.\par \par \par\b 5.5 ATTRIBUTE GROUPS\b0\par The general -purpose attributes that are used in the abstract model (or in the concrete model derived\par from the abstract model) can be grouped into several categories.\par 5.5.1 Identification\par The following attributes are used to identify elements in various ways. The identification group is a\par universal group and can be used on all elements.\par \par\b 1 @id An immutable (unchangeable) id assigned to an element upon creat ion. It\b0\par should be preserved as is when an element is moved. However, when an\par element is copied, new values for all @id attributes in the copied\par fragment should be generated.\par \par\b 2 @name A name assigned to an element that can be parameterized to support\b0\par compu tation of a name or id a point in time. For example: " s{num}".\par \par\b 3 @temporal Id An evolving name assigned to an element that reflects it current type and\b0\par any numbering.\par \par \par\b Page 2 0\b0\par United States Legislative Model (USLM) User Guide\par \par\b 2 0\b0\par \par\b 4 @identifier Used on the root element s to specify the URL -based path reference to\b0\par that element. The @identifier is specified as an absolute path (i. e. a\par path beginning with a single slash) in accordance to the rules of the\par Reference Model described in section 1 3. @identifier is an evolving\par identity and may only be valid for a specific time.\par 5.5.2 Classification\par The following attributes are used to classify elements. These are primarily used for informal subclassing\par and styling purposes.\par \par\b 1 @role Assign s a single semantic subclass to an element. This attribute is primarily\b0\par for use with abstract elements, but may be used across all elements to\par provide a richer semantic association.\par \par\b 2 @class Assigns one or more presentation classes to an element. These classes\b0\par relate to CSS classes.\par \par\b 3 @style Embed s CSS styles, particular to a spec ific instance, with the element.\b0\par 5.5.3 Annotation\par The following attributes are used to annotate or mark elements, usually for editorial reasons. A ttribute\par values are not shown in a published form. The annotation group is un iversal and can be used on all\par elements.\par \par\b 1 @note A simple text note not to be published.\b0\par \par\b 2 @alt An alternate description of an element. The @alt attribute is intended\b0\par to map to the HTML @alt attribute f or use with WCAG 2.0 and other\par accessibility initiatives.\par \par\b 3 @meta An association with an element. How this attribute is used is not\b0\par prescribed.\par \par\b 4 @misc [Reserved f or future use. ]\b0\par \par\b 5 @drafting Tip For internal use by the Office s of the Legislative Counsel of the U. S.\b0\par House of Representatives or the U. S. Senate (or other entities in the\par legislative branch).\par \par\b 6 @codification Tip For internal use by the Office of the Law Revision Counsel of the U. S.\b0\par House of Representatives (or other entities in the legislative branch).\par 5.5.4 Description\par The following attributes are used to describe or categorize elements.\par \par\b 1 @title A short textual description of an item.\b0\par \par\b 2 @brief A longer textual description of an item.\b0\par \par \par\b Page 2 1\b0\par United States Legislative Model (USLM) User Guide\par \par\b 2 1\b0\par \par\b 3 @sort Order A numeric integer used to signify the order in which an item should\b0\par appear with its siblings.\par 5.5.5 Reference\par The following attributes are used to establish pointers or references to other documents or locations\par within the same document.\par \par\b 1 @href A URL reference to another document or part of another document. The\b0\par @href URL in USLM is generally a path beginning with a single slash. A\par “resolver”, described in section 1 3, maps between the path found in the\par URL and the full URL required to retrieve the target item.\par \par \par\b 2 @idref A reference to an item within the same document, identified by\b0\par specifying the value of the @id attribute for the target element. If the\par @idref points to a <ref> element, then the referencing attributes of\par the target element are inherited, in a recursive fashion. This con cept is\par described in more detail later in section 1 3.\par \par\b 3 @portion Specifies an additional part of a reference to be tacked onto the existing\b0\par context of a reference (usually established through the @idref). If the\par @portion does not begin with a separator character (“/”, “!”, “@ ”),\par then a “/” is assumed.\par 5.5.6 Action\par The following attributes are used in amendments to declare how amendments are to be made.\par \par\b 1 @type Describes, through an enumerated value, the action being taken.\b0\par \par\b 2 @occurrence Describes which occurrence of an item on which the action is to be\b0\par taken.\par \par\b 3 @commencement Date Specifies the date on which the action is to be taken.\b0\par 5.5.7 Amending\par Attributes used to point to items being amended. The amending group is used with the Reference Group\par and should be used only within amending instructions.\par \par\b 1 @pos Specifies a relative position in which an action is to occur, such as\b0\par before or after the item being referenced.\par \par\b 2 @pos Text Used in conjunction with the @pos attribute to specify a location. It\b0\par specifies text within the referenced item that the @pos is relative to.\par \par \par\b Page 2 2\b0\par United States Legislative Model (USLM) User Guide\par \par\b 2 2\b0\par \par\b 3 @pos Count Used in conjunction with the @pos Text attribute when an occurrence\b0\par other than the first occurrence of a string of text is to be acte d upon. In\par addition to specifying a particular instance, enumerated values are\par available to specify other sets, such as all.\par 5.5.8 Link\par The following attribute is used to link other documents or images intended to be embedded within the\par primary document.\par \par\b 1 @src A URL reference to a document, image, or other item to be embedded in\b0\par a document. If @src contains an absolute path, it should be handled by\par a resolver, similar to an @href attribute.\par 5.5.9 Value\par The following attributes are used to hold normalized values computed from the text content.\par \par\b 1 @value A normalized value representing the content of the element.\b0\par \par\b 2 @start Value A normalized value representing the start of a range expressed in the\b0\par content of the element.\par \par\b 3 @end Value A normalized value representing the end of a range expressed in the\b0\par content of the element.\par 5.5.1 0 Date\par The following attributes are used to hold normalized forms of date and time values computed from the\par text content. All date and date times are expressed as YYYY -MM- DD[Thh: mm: ss[Z|(+|- )hh: mm]].\par \par\b 1 @date A normalized date (or date and time) represen ting the content of the\b0\par element.\par \par\b 2 @begin Date A normalized date (or date and time) representing the start of a time/date\b0\par range expressed as content of the element\par \par\b 3 @end Date A normalized date (or date and time) repr esenting the end of a time/date\b0\par range expressed as content of the element\par 5.5.1 1 Versioning\par The following attributes are used to manage the temporal, or time -based, aspects of legislation and the\par law. All time/dates used in the versioning group use the same time/date format as the Date group.\par \par\b 1 @start Period The earliest date (or date and time) a version applies to.\b0\par \par\b 2 @end Period The latest date (or date and time) a version applies to.\b0\par \par\b 3 @status The state of a provision during the period.\b0\par \par \par\b Page 2 3\b0\par United States Legislative Model (USLM) User Guide\par \par\b 2 3\b0\par \par\b 4 @partial A Boolean specifying that the status is only partially in\b0\par effect.\par 5.5.1 2 Cell\par The following attributes are used for managing column structures. The @colspan and @rowspan\par attributes are borrowed from HTML and fo llow HTML 's all lowercase convention.\par \par\b 1 @colspan Specifies h ow many columns the current column cell should span. By\b0\par default, a column cell only spans a single column.\par \par\b 2 @rowspan Specifies h ow many rows the current column cell should span. By\b0\par default, a column cell only spans a single row.\par \par \par\b 3 @leaders Specifies a character to be used as a leader. Typically a dot leader (“.”) is\b0\par used to create a series of dots.\par 5.5.1 3 Note\par The following attributes are used for positioning and categorizing individual notes and groups of notes.\par \par\b 1 @type When used within a note or a notes container, @type specifies the\b0\par position of the note. Se tting the @type attribute to “footnote ” indicate s\par that the note or notes contained should be shown in the footnotes at\par the end of the page and setting to “endnote ” indicates that the note or\par notes contained should be shown at the end of the document. If not\par specified, “footnote ” is assumed. For users of @type other than within\par notes, see below.\par \par\b 2 @topic Specifie s the focus of the notes. The @topic attribute is set to a string\b0\par value in order to categorize the note or group of notes. An open, but\par enumerated, list of string values should be used. Using a fixed list of\par values will better aid in categorization of notes later.\par 5.5.1 4 Other Attributes\par The following are other miscellaneous attributes.\par \par\b 1 @xml: lang\b0\par The language of the text contained.\par \par\b 2 @xml: base A URL that can be used to resolve all URLs found in the document. USLM\b0\par URLs are generally specified as absolute paths. This is to make USLM\par documents portable, allowing them to be rehosted in a different\par location without modification. The @xml: base provides a preferred\par location of a resolver capable of resolving the contained references.\par However, this location is only an advisory. It is be possible for a local\par system to determine its own preferred resolver location.\par \par \par\b Page 2 4\b0\par United States Legislative Model (USLM) User Guide\par \par\b 2 4\b0\par \par\b 3 @orientation Used to specify when a landscape orientation is to be used when the\b0\par item is published. If not set, the default orientation is portrait.\par \par \par\b 4 @type Specifies a n enumerated categorization beyond the classing and\b0\par subclassing provided by USLM. Different elements that use the @type\par attribute provide different enumerated values to use. The @type\par attribute is generally used when the classification defines procedural or\par programmatic behaviors that must be implemented in the system.\par \par \par\b Page 2 5\b0\par United States Legislative Model (USLM) User Guide\par \par\b 2 5\b0\par \par\b 6 CORE DOCUMENT MODEL\b0\par \par\b 6.1 CONCEPT\b0\par The core document model uses the core elements of the abstract model discussed above to define a\par simple model for constructing legislation or la w with abstract elements. This model is summarized\par below. A number of details are omitted for the sake of brevity.\par \par <? xml version=”1.0” encoding=”UTF- 8”?>\par <law Doc\par xmlns=http://xml. house. gov/schemas/uslm/1.0\par xsi: schema Location=”http://xml. house. gov/schemas/uslm/1.0./USLM-1.0. xsd”\par xml: base="http://resolver. mydomain. com"\par identifier=”/us/usc/t 5”>\par <meta>\par <property name=”doc Title”>…</property>\par …\par </meta>\par <main>\par <layout>\par <header>Table of Contents</header>\par <toc>\par <toc Item title=”Chapter 1”>\par <column>1.</column>\par < column leaders=”.”>General Provisions</column>\par <column>1 01</column>\par </toc Item>\par </toc>\par </layout>\par \par <level role=”Chapter”>\par <num value=”1”>CHAPTER 1.</num>\par <heading>General Provisions</heading>\par < content>...\par </content>\par </level>\par </main>\par </law Doc>\par \par \par\b Page 2 6\b0\par United States Legislative Model (USLM) User Guide\par \par\b 2 6\b0\par \par\b 6.2 METADATA\b0\par The metadata block, <meta>, is an optional block of named properties or sets of named properties at\par the start of the document. Properties are defined as simple strings. The metadata model is open and\par unconstrained to provide maximum flexibility.\par Information found in the metadata block is generally not printed in the published form.\par Some of the metadata may be generated through analysis of the main text of the document. Whenever\par the document is modified, this metadata is regenerated to accurately reflect the current state.\par Metadata can be defined using (1) the abstract <property> and <set> elements, (2) the built- in <\par <doc Number>, and other properties, or (3) elements defined in the Dublin Core.\par \par\b 6.3 MAIN\b0\par The main text of the document is contained in the <main> block. The main block will not have an @id\par or a @name attribute. References to items in the main body may skip or suppress the main level in the\par reference.\par \par\b 6.4 APPENDIC ES\b0\par An appendix can either follow the main part of a document or be a stand -alone document. To include an\par appendix as a stand -alone document, omit the <main> element and includ e the <appendix>\par element directly after the metadata. This technique is used for United States Code title appendices (e. g.,\par Title 5 Appendix).\par There can also be any number of appendices following the main part of the document. These may also\par be known as schedules, annex es, or explanatory note s/memorand a. An <appendix> element can\par either contain the content within the document or it can reference the content for inclusion using the\par @src attribute.\par \par\b 6.5 SIGNATURES\b0\par Some documents contain signature s of the people who introduce, sponsor, or approve the legislation.\par The signatures are held in a <signatures > block, either at the top of the main part of the document\par or in the appendices.\par \par\b 6.6 MULTIPLE MODELS\b0\par Models from multiple XML namespaces are used to construct a USLM document. The dcterms model is\par used for metadata. T he XHTML model is used for table s. XHTML may also be used to mark the external\par document for inclusion within the larger legislative document. In the future, Math ML may be used for\par equations and SVG may be used for vector graphics.\par \par \par\b Page 2 7\b0\par United States Legislative Model (USLM) User Guide\par \par\b 2 7\b0\par \par\b 7 CONCRETE MODEL\b0\par \par\b 7.1 CONCEPT\b0\par The concrete model builds on the abstract model discussed in section 5 of thi s document. The concrete\par model implements a broad set of tags to meet specific semantic needs now and in the future. These tags\par are generally implemented as simple synonyms of the tags in the abstract model. This approach\par preserves the simplicity and flexibility of the abstract model.\par \par\b 7.2 DOCUMENTS\b0\par Element Derived From Contains\par \par\b 1 <bill> <law Doc> A proposed bill\b0\par \par \par\b 2 <statute> <law Doc> An enacted bill\b0\par \par \par\b 3 <resolution> <law Doc> A proposed resolution\b0\par \par \par\b 4 <amendment> <law Doc> A document containing a pre -enactment stage\b0\par amendment\par \par \par\b 5 <usc Doc> <law Doc> A title or appendix of the United States Code\b0\par \par \par\b 7.3 PROPERTIES\b0\par Element Derived From Contains\par \par \par\b 1 <doc Number> <property> A numeric designation assigned to the\b0\par document\par \par \par\b 2 <doc Publication Name > <property> The name of the publication that the\b0\par document is part of\par \par\b 3 <doc Release Point> <property> The point (i. e. the Public Law number for a\b0\par United States Code title) at which the\par document was released\par \par\b 7.4 TITLES\b0\par Element Derived From Contains\par \par\b 1 <doc Title> <statement> A statement that precedes the long title in the bill\b0\par \par \par\b 2 <long Title> <statement> A statement that sets out the purposes of the bill\b0\par \par \par\b 3 <short Title> <inline> The short title of a bill where it is first defined\b0\par \par \par\b Page 2 8\b0\par United States Legislative Model (USLM) User Guide\par \par\b 2 8\b0\par \par\b 7.5 LEVELS\b0\par Element Derived From Contains\par \par\b 1 <preliminary > <level> A hierarchical region of the main document\b0\par consisting of preliminary clauses that are\par outside of the main document hierarchy\par \par \par\b 2 <title> <level> A hierarchical level in a legislative document\b0\par \par \par\b 3 <subtitle > <level> A level below <title>\b0\par \par \par\b 4 <chapter> <level> A hierarchical level in a legislative document\b0\par \par \par\b 5 <subchapter> <level> A level below <chapter>\b0\par \par \par\b 6 <part> <level> A hierarchical level in a legislative document\b0\par \par \par\b 7 <subpart> <level> A level below <part>\b0\par \par \par\b 8 <division> <level> A hierarchical level in a legislative document\b0\par \par \par\b 9 <subdivision> <level> A level below <division>\b0\par \par \par\b 1 0 <article> <level> A hierarchical level in a legislative document\b0\par \par \par\b 1 1 <subarticle > <level> A level below <article>\b0\par \par \par\b 1 2 <section> <level> The primary hierarchical level in a <title>\b0\par or <bill>\par \par \par\b 1 3 <subsection> <level> A level below <section>. Usually\b0\par numbered with lower -case letters.\par \par \par\b 1 4 <paragraph> <level> A level below <section>, often below a\b0\par <subsection>. Usually numbered with\par Arabic numbers.\par \par \par\b 1 5 <subparagraph> <level> A level below <paragraph>. Usually\b0\par numbered with upper -case letters.\par \par \par\b 1 6 <clause> <level> A level below <subparagraph>. Usually\b0\par numbered with lower -case Roman numerals.\par \par \par\b 1 7 <subclause> <level> A level below <clause>. Usually\b0\par numbered with upper -case Roman\par numerals.\par \par \par\b 1 8 <item> <level> A level below <subclause>. Usually\b0\par \par \par\b Page 2 9\b0\par United States Legislative Model (USLM) User Guide\par \par\b 2 9\b0\par numbered with double lower -case letters.\par \par \par\b 1 9 <subitem> <level> A level below <item>. Usually numbered\b0\par with double upper -case letters.\par \par \par\b 2 0 <subsubitem> <level> A level below <subitem>. Usually\b0\par numbered with triple lower -case letters.\par \par \par\b 2 1 <compiled Act > <level> An act that is included in a title appendix.\b0\par Amendments to these acts are typically\par compiled into the included act.\par \par \par\b 2 2 <court Rules > <level> A level container to hold a sequence of court\b0\par rules. Found in title appendices.\par \par \par\b 2 3 <court Rule > <level> An individual court rule. Found in title\b0\par appendices.\par \par \par\b 2 4 <reorganization Plans > <level> A level container to hold a sequence of\b0\par reorganization plans. Found in title\par appendices.\par \par \par\b 2 5 <reorganization Plan > <level> An individual reorganization plan. Found in\b0\par title appendices.\par \par\b 7.6 OTHER STRUCTURES\b0\par Element Derived From Contains\par \par\b 1 <def> <text> One or more <term> elements, as wel l as their\b0\par respective definitions\par \par \par\b 2 <term> <inline> A term in the document that is being defined\b0\par \par \par\b 3 <chapeau> <text> Introductory text that comes before lower levels\b0\par in a level hierarchy\par \par \par\b 4 <continuation> <text> Final or interstitial text that comes after or\b0\par between lower levels in a level hierarchy\par \par \par\b 5 <proviso> <text> A paragraph of text, usually beginning with\b0\par “Provided that” or “Provided”, that states conditions on the law to which it is related\par \par \par\b Page 3 0\b0\par United States Legislative Model (USLM) User Guide\par \par\b 3 0\b0\par \par \par\b 7.7 NOTES\b0\par Element Derived From Contains\par \par\b 1 <source Credit > <note> Text containing the source of a provision,\b0\par usually surrounded by parentheses\par \par \par\b 2 <statutory Note > <note> A note that becomes part of the law\b0\par \par \par\b 3 <editorial Note > <note> A note included for editorial purposes only\b0\par \par \par\b 4 <change Note > <note> A note that records a non -substantive\b0\par change that has been made to the\par document, usually surrounded by square brackets\par \par\b 7.8 SIGNATURES\b0\par Example Derived From\par \par\b 1 < made> <signature> The signatures of the people making the\b0\par legislation\par \par \par\b 2 <approved> <signature> The signature s of the people approving the\b0\par document\par \par\b 7.9 APPENDICES\b0\par Example Derived From\par \par\b 1 <schedule> <appendix> An appendix to a document, often a list of\b0\par numbered items, a table, or another document\par \par \par\b Page 3 1\b0\par United States Legislative Model (USLM) User Guide\par \par\b 3 1\b0\par \par\b 8 VERSIONING MODEL\b0\par \par\b 8.1 CONCEPT\b0\par Legislative documents frequently evolve as existing provisions are repeatedly amended. Managing the\par versioning of legislative documents is a complex problem.\par Rather than managing versioning by creating a whole new document every time an amendment is\par made, the versioning is instead managed in a more granular way. USLM is designed to allow a large\par degree of flexibility in how the versioning takes place. This allows for limitations in the short term and\par for greater sophistication as needs evolve.\par \par\b 8.2 MANAGING VERSIONS\b0\par The USLM model for versioning allows versions to be handled in a hierarchical manner from the document root all the way down to individual provisions. In general, it is best to version at the lowest\par possible level of the hierarchy. This minimizes the likelihood of amendments overlapping in time, which\par would require the creation of different versions to handle the different states of the text through the\par overlapping time period.\par In addition, if versioning is too high up in the hierarchy, then each new version will cause an entire copy\par of the lower levels to be generated. For this reason, it is preferable to push the versioning down to the\par lower parts of the level – such as the <num> or the <heading> elements when versioning upper (or\par big) levels in legislative text.\par When choosing a level at which to apply versioning, it must be possible for multiple versions of an\par element to coexist alongside one another. For this reason, the structure defined in the schema allows\par multiple instances of an element ( max Occurs=”unbounded”).\par \par\b 8.3 TEMPORAL PERIODS\b0\par Alternate versions of the same item exist alongside one another within the same document, with each\par version being associated with a specific temporal period defined by the @start Period and\par @end Period attributes. In cases where one of th ese attributes is missing, then the same attribute\par found at a higher level in the document hierarchy applies. If no such attribute is found, then the time\par period is open -ended in that temporal direction.\par The @start Period or @end Period can be defined as either a simple date or as datetime. When\par defined as a simple date, then midnight at the beginning of the date is assumed when establishing the\par correct instant for point -in-time calculations.\par \par\b 8.4 STATUS\b0\par The @status attribute is used to declare the status of a version. It is important to realize that the\par @start Period and @end Period are defining a time period for a version of an item and may not\par correspond to an effective date or repeal date.\par \par \par\b Page 3 2\b0\par United States Legislative Model (USLM) User Guide\par \par\b 3 2\b0\par Statuses in USLM include proposed, withdrawn, cancelled, pending, operational,\par suspended, renumbered, repealed, expired, terminated, had Its Effect, omitted,\par not Adopted, transferred, redesignated, reserved, vacant, cross Reference, and\par unknown.\par \par \par\b Page 3 3\b0\par United States Legislative Model (USLM) User Guide\par \par\b 3 3\b0\par \par\b 9 PRESENTATION MODEL\b0\par \par\b 9.1 CONCEPT\b0\par Presentation is based on concepts similar to XHTML. An overriding rule is to separate, as much as\par possible, the formatting of the text for publication from the semantic model. To the greatest extent\par possible, the XML elements of USLM reflect the semantic m odel rather than the formatting model.\par Some formatting elements related to presentation are included in the XML, such as the <layout>\par structure and the <b> and <i> elements. These formatting elements are provided for the sake of\par practicality.\par Most styling is handled using Cascading Style Sheets (CSS), as is the case with modern HTML.\par \par\b 9.2 CSS ATTRIBUTES\b0\par There are two primary attributes which are used to affect the presentation of the text:\par \par\b 1 @class The @class attribute is used, as in HTML, to identify CSS classes.\b0\par \par\b 2 @style The @style attribute is used to specify CSS attributes. Ordinarily, all\b0\par presentation attributes should be specified in a separate CSS file.\par However, there are many legacy cases where individual instances do not\par follow the standard form for presentation of that element. In these cases,\par the converter should leave the non -standard formatting with the @style\par attribute where it can override the C SS attributes defined in the external\par stylesheet.\par \par\b 9.3 HTML REPRESENTATION\b0\par There is a stra ightforward method to transform a USLM -based XML document to and from HTML 5. This\par approach is designed to maintain the integrity of the information. Bidirectional t ransfo rmations can\par occur in a web -based editing environment without losing or changing any data.\par The method to transform from USLM -based XML to HTML 5 is as follows:\par \par\b 1. All XML elements based on the marker, inline, or string types are transformed into HTML 5\b0\par <span> elements.\par \par \par\b 2. All XML elements based on the block or content types are transformed into HTML 5 <div>\b0\par elements.\par \par \par\b 3. The <layout> XML elements are translated into HTML 5 <table> elements. The <layout>\b0\par child elements become <tr> elements unless they are the USLM <column> elements. In\par that case, a single <tr> row is defined to contain the columns, and the <column> elements\par become <td> HTML table cells.\par \par \par\b Page 3 4\b0\par United States Legislative Model (USLM) User Guide\par \par\b 3 4\b0\par \par\b 4. Any @role attribute on the XML element becomes the @role attribute on the HTML 5\b0\par element. If there is no @ role attribute on the XML element, then the element name becomes\par the HTML 5 @role attribute.\par \par \par\b 5. The @class attribute on the HTML 5 element is composed of the local name of the XML\b0\par element, followed by an underscore character and the XML @role attribute value if it exists,\par followed by the XML @class attribute values, space separated. For instance, the element\par <level role="Chapter" class="indent 1" > becomes the\par @class="level_Chapter indent 1" attribute.\par \par \par\b 6. Any @xml: lang attribute on th e XML element becomes the HTML 5 @lang attribute.\b0\par \par \par\b 7. The following attributes carry over from the XML element to an identically named HTML 5\b0\par attribute: @style, @id, @href, @idref, @src, @alt, @colspan, and @rowspan.\par \par 8. All other attributes carry over to the HTML 5 by inserting the prefix “data- “ + namespace Prefix\par + “-“ + XML attribute. For example, the @name attribute on the XML element becomes the\par @data-uslm-name attribute.\par \par \par\b 9. The entire resulting HTML 5 document fragment is ordinarily placed with in the HTML 5 <body>\b0\par element.\par \par \par\b 1 0. CSS classes are associated with the resulting HTML 5 fragment using well- established HTML 5\b0\par methods.\par The transformation from HTML 5 back to USLM -based XML is accomplished by reversing the process\par describe d above.\par \par \par\b Page 3 5\b0\par United States Legislative Model (USLM) User Guide\par \par\b 3 5\b0\par \par\b 1 0 HIERARCHICAL MODEL\b0\par \par\b 1 0.1 CONCEPT\b0\par Most legislative documents have a well -defined hierarchical structure of numbered level s. The abstract\par model provides a general- purpose hierarchy necessary for legislative documents. This hierarchy does\par not impose restrictions, but instead allows any <level> to be placed within any <level>. This\par flexibility allows varying structures, some of which are anomalous, to be supported without adding\par layers of complexity.\par \par\b 1 0.2 LEVELS\b0\par The fundamental unit of the hierarchy is the <level> element. A discussion below describes how the\par @class attribute and XML schema substitution groups can be used to subclass this fundamental unit to\par produce the various levels found in the United States Code.\par A level is composed of (1) a <num> ident ification designation, (2) an optional <heading>, and (3)\par either primarily textual <content>, lower hierarchical <level> children, or a few other possible\par elements.\par \par\b 1 0.3 BIG LEVELS VS. SMALL LEVELS\b0\par The principal level is the <section> level. Levels above the < section> level are referred to as\par “big” levels and levels below the <section> level are referred to as “ small” levels.\par Big Levels title, subtitle, chapter, subchapter, part, subpart, division, subdivision\par Primary Level section\par Small Levels subsection, paragraph, subparagraph, clause, subclause, item, subitem,\par subsubitem\par The primary difference between big levels and small levels is in how they are referred to in references.\par Big levels and primary levels are referred to using a prefix to identify the l evel’s type. Small levels are\par referred to simply by using the number designation assigned to the level in a level hierarchy. Further\par details are discussed below under Referencing Model.\par \par\b 1 0.4 SANDWICH STRUCTURES\b0\par Sandwich structures are hierarchical levels that start and/or end with text rather than lower levels. This\par structure is quite common. Typically, some text will introduce the next lower level or will follow the last\par item of a lower level. The <chapeau> (French for "hat") and <continuation> elements are\par provided for this structure. The <chapeau> precedes the lower levels and the <continuation>\par follows the lower levels. The <continuation> element can also be used for cases where interstitial\par text is found between elements of the same level.\par \par \par\b Page 3 6\b0\par United States Legislative Model (USLM) User Guide\par \par\b 3 6\b0\par One specific type of continuation text is a paragraph -like structure beginning with “Provided that” or\par “Provided”. The <proviso> element is used in this case. Multiple provisos may exist.\par \par\b 1 0.5 TABLE OF CONTENTS\b0\par A table of contents (TOC) model is provided to mod el the level hierarchy. A TOC can appear either at the\par top of a hierarchy or at lowe r levels, and in the main part of the document or in an appendix. The root of\par the TOC structure is the <toc> element and the levels can be arranged into a hierarchy of < toc Item>\par elements. Attributes from the description group are used to define the information in the hierarchy.\par The <toc> structure can be intermixed with the < layout> structure to define a tabular layout for a\par table of contents.\par \par \par\b Page 3 7\b0\par United States Legislative Model (USLM) User Guide\par \par\b 3 7\b0\par \par\b 1 1 TABLE MODEL\b0\par Two table -like models can be used w ith USLM: (1) a column -oriented model and (2) the HTML table\par model.\par \par\b 1 1.1 COLUMN -ORIENTED\b0\par Use the column -oriented <layout> model when information related to the legislative structure is to\par be arranged in a column - or grid -oriented fashion, but not a true table. The advantage of the column -\par oriented <layout> model is that it is defined within USLM, so it can contain other USLM elements.\par The drawback is that it is a non -standard table model, so it is not inherently understood by tools that\par handle standard HTML tables.\par The <layout> model is intended to be flexible. It provides a <row> element for defining individual\par rows. When there is a row structure, the parts of each row that belong within each column are\par identified using the <column> elem ent. Any direct child of the < layout> element is considered to be\par a row unless it is a < layout> element.\par However, when the <column> element is a direct child of the < layout> element, then there is no\par notion of rows, and the columns form a basic structure of the <layout>. If <layout> contains any\par <column> child, then it must only contain <column>s as children.\par Like HTML tables, the < layout> model supports the @colspan and the @rowspan elements.\par \par\b 1 1.2 HTML TABLES\b0\par Use the HTML <table> model when (1) information is arranged in a tabular structure, (2) there is little\par information within the table that is part of the legislative structure, or (3) the structure is regarded as a\par normal table with gridlines and table cells.\par An embedded HTML table will look something like this:\par <schedule name=”sch{num}”>\par <num value="1">Schedule 1</num>\par <heading>…</heading>\par <table xmlns=http://www. w 3. org/1 99 9/xhtml”>\par <th>…</th>\par <tr>…</tr>\par …\par <table>\par </schedule>\par \par \par\b Page 3 8\b0\par United States Legislative Model (USLM) User Guide\par \par\b 3 8\b0\par \par\b 1 2 IDENTIFICATION MODEL\b0\par \par\b 1 2.1 CONCEPT\b0\par Elements are assigned identifiers or names for two primary purposes. The first is to be able to reliably\par refer to the element throughout its lifetime, regardless of how it might be altered. The second is to be\par able to address the item based on its current state. To support both of these purposes, the available\par attributes are @id, @temporal Id, @name, and @identifier.\par \par\b 1 2.2 IMMUTABLE IDENTIFIERS\b0\par Immutable identifiers are unchanging identifiers that are assigned when the element is created and do\par not change througho ut the lifetime of the element. This makes them reliable handles with which to\par access the elements in a database or repository system. The @id attribute is used for this purpose. It is\par defined as an XML Schema ID, which requires that all @id attribute valu es be guaranteed to be unique\par within a document, with no exceptions.\par For the purposes of document management in USLM, especially in the amending cycle, @id values\par should be computed as GUID (Globally Unique Identifiers) with an " id" prefix. This means that they\par should be co mputed using an algorithm that guarantees that no two identifiers, in any document,\par anywhere, will ever be the same. This is a broader definition of uniqueness than imposed by the XML Schema ID definition. There are many tools availab le to generate GUIDs.\par Whenever an element is moved, its @id attribute value must be preserved. When an element is copied,\par a new value for the @id attribute value must be generate d for the new element created. Special care\par must be taken to ensure that the @ id value is managed correctly. Proper management of the @id\par attribute value will provide a reliable handle upon which to attach other metadata such as commentary.\par It is important that the value of the @id attribute not reflect, in any way, some aspect of the element\par that might change over time. For instance, if there is a number associated with an element and that\par number is subject to renumbering, then the @id attribute value should have no relation to the number\par that is subject to renumbering.\par \par\b 1 2.3 TEMPORAL IDENTITY\b0\par A @temporal Id is a human -readable identity, scoped at the document level. While the @id attribute\par is defined to be unique in the document and constant throughout the lifetime of the element, and the\par schema enforces this uniqueness, the @temporal Id attribute is defined loosely and changes to reflect\par the current location and numbering of the element over time.\par Because the @temporal Id attribute is assigned a value that reflects the current state of the element,\par special care must be taken to ensure tha t the value of the @temporal Id attribute is recomputed\par anytime the state of the element changes. It is usually a good practice to recompute the\par @temporal Id values whenever the document is committed or saved.\par \par \par\b Page 3 9\b0\par United States Legislative Model (USLM) User Guide\par \par\b 3 9\b0\par Ideally, the @ temporal Id attribute should be un ique in a document, but this is not always possible\par due to various anomalies. For this reason, the uniqueness of the @temporal Id attribute is not\par enforced by the schema, and some ambiguity is possible. How the disambiguation of duplicate names is\par handled i s a subject that must be dealt with in the design of the software systems which will encounter\par this situation.\par A recommended approach for computing the @ temporal Id value is to base the name on the\par hierarchy to get to the element, almost in a path -like fashion. The @temporal Id value can be\par constructed as follows:\par [parent Id + “_“] + [big Level Prefix] + num\par Where:\par parent Id is the @temporal Id value of the parent element. If the parent element does not\par have a @temporal Id value or does not have a unique @ temporal Id, then the local XML\par name of the parent element is used, with special care being taken to ensure that all parent\par elements that are not unique have assigned @name values.\par big Level Prefix = a prefix reflecting the level type, such as “p” for part, “ d” for division, or\par “sd” for subdivision. For sections use “ s”. For small levels, no prefix is used.\par num = the normalized value of the number or designation given to the level.\par Exceptions:\par The <doc> root level should be omitted from the computation.\par The <main> level should be omitted.\par Levels of the hierarchy should be omitted whenever the numbering of a level does not require\par references to the higher levels. For example, section numbers are usually unique throughout the\par document, so it is not necessary to use the higher b ig levels to compute a name. So a section\par can be identified as simply “ s 1” rather than “ p 1_d 1_s 1”.\par For example, part III of subchapter II of chapter 1 2 of Title 8 would have a @temporal Id of\par “ch 12_sch II_pt III”, and subparagraph (A) of p aragraph (1) of subsection (a) of section 1 20 1 of Title 8\par would have a @temporal Id of “s 12 01_a_ 1_A”.\par \par\b 1 2.4 LOCAL NAMES\b0\par Local names are usually related to the parent element or container in which they are found. This is the\par purpose of the @name attribute. The most common use of the @name attribute is when naming a\par <property> element. The @name attribute is also used to name a level within the local context of its\par parent level.\par There is a problem with naming a level: its name is subject to change through time. This is because\par levels are subject to renumbering. To support this, the @name can be defined in a parameterized way.\par The parameters will need to be evaluated whenever a document is requested for a specific point- in-\par time.\par \par \par\b Page 4 0\b0\par United States Legislative Model (USLM) User Guide\par \par\b 4 0\b0\par The parameters are specified within the @name attribute value using a curly braces notation. Two\par parameters can be specified:\par 1) Use the {num} parameter to include the current normalized value ( i. e., the @value attribute of\par the <num> element) in the name of the level.\par 2) Use the {index} parameter to include the 1 -based index position, calculated again st other\par elements of the same type at the same level.\par To better ensure the uniqueness of the @ name attribute values generated in the future, a rational\par scheme must be designed. This is important because the @name attribute is also used in the mapping of\par links or references to elements. This process is accomplished by a web server add -in called a “resolver”.\par Resolvers are described in the next chapter.\par \par\b 1 2.5 IDENTIFIERS\b0\par An @identifier is used on the root element to specify the URL reference to the document root. The\par @identifier is specified as an absolute path in accordance to the rules of the Reference Model\par described in this document.\par An @xml: base attribute is also specified on the root element to specify the location of a preferred\par resolver capable of resolving a reference. The @xml: base concatenated with the @identifier\par forms a complete URL reference.\par Typically, the @identifier will be established on the root element and all level elements.\par \par \par\b Page 4 1\b0\par United States Legislative Model (USLM) User Guide\par \par\b 4 1\b0\par \par\b 1 3 REFERENCING MODEL\b0\par \par\b 1 3.1 CONCEPT\b0\par References are a machine readable format for making very precise citations or establishing links\par between different things in a document. The prevailing method for establishing references is to use\par HTTP -based hyperlinks, using the familiar technology prevalent on websites.\par These references are, like websites, modeled as Universal Resource Locators (URL). A URL is a string\par representing a hierarchical path down to the item being requested, using forward slashes “ /” as\par hierarchical separators. In normal websites, each level in the URL represents a folder, terminating in a\par file that is being requested. URLs can be specified in one of three ways: (1) global references starting\par with “http://{domain}”; (2) absolute paths starting with “ /”; or (3) relative references starting\par with “./”. Absolute paths typically use the local domain as the context f or the URL, while relative\par references use the current file as the context.\par USLM references use a variation of the absolute path technique. All references thus start with a forward\par slash “/”. However, rather than representing folder and files, the hierarchical path represents a\par conceptual hierarchy down to the item in question. This path is known as a logical path. The logical path\par does not represent the folder/file hierarchy as with a physical path. In fact, there may be no physical\par path for information stored in a database rather than in a file system.\par Web server s usually handle the task of interpreting a URL and retrieving the requested file from the file\par system. With USLM references, however, the mapping is not so straightforward. A web ser ver must\par interpret the logical path in the URL and retrieve the requested information from a database. This task is\par accomplished by a web server add -in called a “resolver”.\par How the resolver is constructed depends on the web server being used and the storage format for the\par documents. All modern web server s provide some form of facility to allow a resolver to be constructed.\par This issue is discussed in greater detail below under Reference Resolver.\par \par\b 1 3.2 URL REFERENCES\b0\par The International Federation of Library Associa tions and Institutions (IFLA) (http://www. ifla. org/) has\par developed a conceptual entity -relationship model for organizing bibliographic records (like index cards\par at a library). This model is called the Functional Requirements for Bibliographic Records (FRBR –\par pronounced " Ferber "). FRBR creates the conceptual framework for the USLM references.\par \par \par\b Page 4 2\b0\par United States Legislative Model (USLM) User Guide\par \par\b 4 2\b0\par References in USLM are composed using the following format:\par [item][work][lang] [portion][temporal][ manifestation]\par Where:\par • item – identifies the location of an instance. For non-computer locations, this is expressed as\par an http domain. An example would be http://uscode. house. gov.\par \par • work – identifies the logical hierarchy down to the documen t being referenced. This hier arch y\par starts by identifying the jurisdiction (“ /us” for United States ) and continues by identifying the\par document (“ /usc/t 5” for Title 5 ). The jurisdiction is included in order to distinguish between\par the library that serves the document and the jurisdiction where the document originated. With\par this approach, it is possible for a library to serve a document from a different jurisdiction.\par \par • lang expression (“!” prefix) – identifies the language. If the lang is not specified, then the\par language is assumed to be the language of referencing document or referencing environment.\par \par • portion (“/” prefix) – extends the work hierarchy to identify an item within the document. For\par example, “/s 1/a/2 ” for paragraph ( 2) of subsection (a) of section 1 in the main body. Note\par that the portion is an easy mapping of the @temporal Id for that element which is “s 1_ a_ 2”.\par This gives a hint for how to resolve the portion part of a URL identifier.\par \par • temporal expression (“@” prefix) - the date/time is expressed acco rding to ISO 8 60 1\par (“@2 01 3-0 5-0 2” for May 2, 2 01 3). If the “@” is specified, but without a date/time, then the\par reference is to the current time. If no temporal expression is specified, the context may be used\par to identify the point- in-time, which is usually the date of the document making the reference.\par \par • manifestation (“.” prefix) – identifies the format as a simple file extension (“. xml” for the\par XML file, “. htm ” for HTML, and “. pdf ” for the PDF).\par Examples:\par • /us/usc/t 5/s 1/a – the current version of subsection (a) of section 1 of title 5.\par \par • /us/usc/t 5/s 1/a @2 01 3-0 5-0 2 – the version of subsection (a) of section 1 of title 5 that\par was in effect on May 2, 2 01 3.\par \par • /us/usc/t 5/s 1/a. htm - the current version of subsection (a) of section 1 of title 5,\par rendered as HTML.\par \par • http://uscode. house. gov/download/us/usc/t 5/main/s 1/a. htm the current\par version of subsection (a) of section 1 of title 5, rendered as HTML and delivered from\par http:// uscode. house. gov /download.\par \par \par\b Page 4 3\b0\par United States Legislative Model (USLM) User Guide\par \par\b 4 3\b0\par Notes:\par • References in documents (using the @href and @src attributes) should always be stored as\par absolute paths, which omit the item part. This allows the reference to be independent of the\par site hosting the document. The role of the resolver is to determine which location can best serve\par the desired item. This al lows a document to be moved from one digital library to another\par without changing the references within the XML. The item location is implicit in the library\par containing the reference. An exception is when a specific item is desired, usually when\par referencing an item from a foreign juris diction.\par \par • There are generally two common methods to identify a document' s type. One method is by\par extension as described above. The other method is to use the MIME type. The MIME type is a\par more robust solution because it allows for a wide variety in file extensions for the same type\par (e. g., ". htm" or ". html" for HTML files). However, file extensions are simpler and less\par cumbersome. This means that an agreed upon registry of file extensions should be maintained by the system.\par \par\b 1 3.3 REFERENCE ATTRIBUTES\b0\par There are four attributes which contain references or portions of references:\par 1) @href-- This is a pointer or link to another document. It is generally stored as an absolute\par path. Prepending the domain to identify a particular instance or library from which the\par information is to be sourced is left to the local resolver. This allows a document to be relocated in another digital library without changing all the references.\par \par 2) @portion-- Often the textual representation of a reference is scattered in several places in a\par document. For instance, a set of amendments might be prefaced with an identification of the document affected, such as title 5 of the United States Code, while the individual amendments\par might specify only a portion of that document, such as subsection ( a) of section 1. The\par @portion attribute allow s a reference to be extended. This will generally be constructed as\par follows:\par <ref id=”ref 00 1” href=”/us/ usc/t 5”/>\par …\par <ref idref=”ref 00 1” portion=”/s 1/a ”/>\par \par The example above shows an initial reference to title 5, United States Code. The second\par reference refers to the first, acquiring the first reference 's @href and then extending it with the\par @portion to produce the reference / us/usc/t 5/s 1/a. This approach can be recursive.\par \par 3) @src – in addition to pointing to other documents, it is often desirable to embed other\par documents within a primary document. The @src attribute is used in this case.\par \par \par\b Page 4 4\b0\par United States Legislative Model (USLM) User Guide\par \par\b 4 4\b0\par 4) @origin – When a fragment of a document is copied into another document, and it is\par necessary to record the place from which the fragment was copied, the @origin attribute is\par used. This exists for the <quoted Text> and <quoted Content> elements.\par \par\b 1 3.4 REFERENCING NOMENCLATURE\b0\par The following case -insensitive referencing nomenclature is used;\par Short Form Long Form Description\par pl[0-9]+ public Law [0-9]+ Public Law + number – Statute\par t[0-9|a-z]+ title[0-9|a-z]+ Title + number\par st[0-9|a-z]+ subtitle [0-9|a-z]+ Subtitle + number\par ch[0-9|a-z]+ chapter[0-9|a-z]+ Chapter + number\par sch[0-9|a-z]+ subchapter [0-9|a-z]+ Subchapter + number\par p[0-9|a-z]+ part[0-9|a-z]+ Part + number\par sp[0-9|a-z]+ subpart[0-9|a-z]+ Subp art + number\par d[0-9|a-z]+ division[0 -9|a-z]+ Division + number\par sd[0-9|a-z]+ subdivision[0 -9|a-z]+ Subdivision + number\par s[0-9|a-z]+ section[0 -9|a-z]+ Section + number\par art[0-9|a-z]+ article[0-9|a-z]+ Article + number\par r[0-9|a-z]+ rule[0-9|a-z]+ Rule + number\par [a-z]+ [a-z]+ Subsection letter\par [0-9]+ [0-9]+ Paragraph number\par [A-Z]+ [A-Z]+ Subparagraph Letter (capital letters )\par [i-x]+ [i-x]+ Clause (lower case roman numeral)\par [I-X]+ [I-X]+ Subclause (upper case roman numeral)\par [aa-zz]+ [aa-zz]+ Item (double lower case letter)\par [AA-ZZ]+ [AA-ZZ]+ Subitem (double upper case letter)\par [aaa-zzz]+ [aaz-zzz]+ Subsubitem (triple lower case letter)\par (suppress ) main Main body\par short Title short Title Short title\par long Title long Title Long title\par preamble preamble Preamb le\par \par \par\b Page 4 5\b0\par United States Legislative Model (USLM) User Guide\par \par\b 4 5\b0\par proviso proviso Proviso\par app[0-9]* appendix[0 -9]* Numbered or unnumbered appendix\par \par Note: The prefixes are defined to be case -insensitive. This is done as case -sensitive URLs can be\par problematic in some environments.\par \par\b 1 3.5 REFERENCES WITHIN AMENDMENT INSTRUCTIONS\b0\par Amen dments refer to the item that they are amending. T he reference may be complex, specifying not\par only the item affected, but a relative position either within, before, or after the item affected. Three\par additional attributes are provided with references to allow this sort of specification:\par • @pos – Specifies a position that is either at the start, before, inside, after, or at the\par end of the context item.\par \par • @pos Text – Establishes the context for the position relative to text contained within the\par referenced item.\par \par • @pos Count – Specifie s which occurrence of the @pos Text within the referenced item is\par being acted upon. By default, the first occurrence is assumed. In addition to specifying which\par occurrence, the values all, none, first, and last may also be used.\par \par\b 1 3.6 REFERENCE RESOLVER\b0\par The URL -based references that are establish ed create the links between various documents within the\par system. A software component is added to the web server to interpret the references, find the relevant\par piece within the dat abase repository, extract it, and perform any necessary assembly and\par transformation before returning the result to the requester. This web server add -in is called a resolver.\par How it is built is determined by the web servers being used. In general, the resolver will perform the\par following sequence of functions:\par 1) It will receive a reference from a requestor.\par \par 2) It will canonicalize the reference, normalizing the text to match one of the forms it understands.\par \par 3) If the reference is to the U. S. jurisdiction and the resolver understand s the reference, then i t will\par attempt to resolve it by retrieving the XML from the document. This might be either an entire document of a fraction thereof.\par \par 4) If the reference is to another jurisdiction, and the resolver is able to resolve the reference,\par either locally or by deferring to another web server, then the resolver will resolve the reference\par that way.\par \par \par\b Page 4 6\b0\par United States Legislative Model (USLM) User Guide\par \par\b 4 6\b0\par 5) If the reference is not understood, then the resolve will return a 4 04 – file not found error.\par \par 6) If the document is being resolved locally, and the XML has been extracted fr om the database,\par then it may need to be assembled or otherwise processed to ensure that the correct temporal\par state has been established. If no temporal information is contained in the URL, then the present\par state is assumed.\par \par 7) Once th e correct XML has been c reated, if a format other than XML has been requested it will\par need to be transformed and/or converted into the correct format. This may involve\par transforming the XML into HTML or creating a PDF.\par \par 8) Some of the steps above may be circumvented in the interest o f performance and efficiency\par with a good caching strategy.\par \par 9) Once the requested item has been retrieved, assembled, and transformed, it is returned to the\par requestor using HTTP.\par There are several strategies that the resolver can use to f ind the item referenc ed by the work part of\par the reference URL:\par 1) The fastest method, if there is a reliable mapping between the @name value and the work part\par of the reference URL, is to map between the reference path and the @name. This approach is\par best when the XML documents are shredded into parts and stored as separate items, either in\par the file system or in a relational database.\par \par 2) Another strategy is to rewrite the reference URL hierarchy as an XPath query. This approach is\par best when there is a good mapping between the refer ence hierarchy and the document\par hierarchy, and the information is stored in an XML repository that supports XPath. Performance\par might be an issue for more complex XPath queries.\par \par 3) The third strategy is to create an indexing mechanism. This solution might rel y on the inherent\par capabilities of the chosen database or repository, or it might be some sort of predefined\par mapping. How this strategy should ultimately be designed is beyond the scope of this User\par Guide.\par \par For a specific document, the preferred resolver is identified using the @xml: base attribute on the root\par element. For instance:\par xml: base="resolver. mydomain. com"\par The @xml: base concatenated with the @identifier forms a complete URL reference.\par A preferred resolver does not currently exist for USLM. Therefo re, the @xml: base attribute is not\par provided in current USLM documents. The United States House intends to provide a resolver in the future. If and when that occurs, the @xml: base attribute will point to that resolver.\par \par \par\b Page 4 7\b0\par United States Legislative Model (USLM) User Guide\par \par\b 4 7\b0\par \par\b 1 4 METADATA MODEL\b0\par \par\b 1 4.1 CONCEPT\b0\par In addition to the text in an XML document, there is also a need to store a significant amount of\par meta data about a document. There are a few ways in which this metadata might be stored:\par 1) Within the document in a separate partition.\par 2) Scattered within the documen t.\par 3) In a separate file.\par 4) In a relational database.\par All four of these approaches can be supported. First, there is an optional <meta> block defined at the\par start of the document. Within this block, properties and sets of properties can be stored. The model for\par this metadata is open and extensible to support a wide range of needs, while also keeping the core\par concepts very simple. The meta data stored here can either be generated in an ongoing fashion, or as the\par result of an analysis of the text after it has been committed, or as a combination of the se.\par In addition to the basic <meta> block, attributes are provided throughout the document fo r storing\par metadata about a particular element with that elements. Most of these attributes have prescribed\par usage, and the model is not as general and flexible as the <meta> block. However, there are a few\par attributes set aside for unprescribed uses. These i nclude the @misc, @drafting Tip, and\par @codification Tip.\par It is possible to store metadata in a separate file or in a relational database. If a separate file is chosen, no format for this file is prescribed. It can be an XML file, some other text file, or even a binary file. One\par option for the format is to borrow the <meta> tag with its <property> and <set> children from\par USLM. This is merely an option; it is not prescrib ed.\par If the information is stored in a separate file or is stored in a database, then it may be necessary to\par maintain a strict association between the XML elements and the records in the file. For this reason,\par element @id values are defined to be immutable, in order to provide a reliable handle for making\par associations. If the @id attribute cannot be managed reliably, then the separate file and database\par options should be avoided.\par \par\b 1 4.2 PROPERTIES\b0\par Properties are basic elements that may or may not have string content. The @name attribute acts as the\par primary identification for a <property>. The @value attribute (and its range siblings) or the @date\par attribute (and its range siblings) are used to place normalized values of dates. Sometimes, a value or date might exist as both text content in the element and, in a normalized form, as an attribute.\par Propert ies are primarily intended for use within the <meta> block or within <set> groupings within\par the <meta> block. However, it is also possible for properties to be used as inline elements within the\par main part of the document.\par \par \par\b Page 4 8\b0\par United States Legislative Model (USLM) User Guide\par \par\b 4 8\b0\par \par\b 1 4.3 SETS\b0\par Properties can be grouped int o simple sets. A <set> is essentially a property folder. Like a\par <property>, the @name attribute acts as the primary identification for a property. Property sets can\par be nested.\par \par \par\b Page 4 9\b0\par United States Legislative Model (USLM) User Guide\par \par\b 4 9\b0\par \par\b 1 5 NOTES MODEL\b0\par \par\b 1 5.1 CONCEPT\b0\par Notes are found throughout the United States Code. USLM defines a very flexible model to support all\par the different types of notes that are found.\par \par\b 1 5.2 NOTE CLASSES\b0\par The abstract model provides two basic element s for implementing notes.\par \par\b 1 5.2.1 Individual notes\b0\par The basic <note> implement provides the fundamental model for a note. A note can be simple string\par of text or it can be a complex structure of text.\par \par\b 1 5.2.2 Notes collection\b0\par Notes can be grouped together into a collection using a <notes> container.\par \par\b 1 5.3 TYPE OF NOTES\b0\par There are four primary types of notes. Use the @type attribute to specify the note type:\par 1) inline – notes that are shown inline where they appear in the text.\par \par 2) endnote – notes that appear at the end of the level in which they appear. A <ref> pointer\par may be used to point to th ese notes\par \par 3) footnote - notes that appear at the bottom of the page in which a reference to that note\par appears. A <ref> point er is used to point to these notes.\par \par 4) usc Note - notes that appear at the bottom of the section or heading, typically after the\par source Credit.\par \par\b 1 5.4 TOPIC OF NOTES\b0\par Notes in the United States Code often have a specific topic, such as "Amendments". Use the @ topic\par attribute to specify the note's topic(s). More than one topic can be specified, separated by spaces, such\par as:\par @topic="regulations construction"\par \par \par\b Page 5 0\b0\par United States Legislative Model (USLM) User Guide\par \par\b 5 0\b0\par \par\b 1 6 FEEDBACK\b0\par The Office of the Law Revision Counsel of the U. S. House of Representatives welcomes any questions or\par comments about USLM or this user guide at uscode@mail. house. gov.\par }